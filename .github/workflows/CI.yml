# Copyright 2023 Jan-Hendrik Ewers
# SPDX-License-Identifier: GPL-3.0-only

name: CI

on:
    push:
        branches: [master, dev]
    pull_request:
    workflow_dispatch:

jobs:
  cache-pybullet:
    name: Cache pybullet
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
            - "3.10"
            - "3.11"
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          cache: "pip"
          python-version: ${{ matrix.python-version }}
          cache-dependency-path: |
            **/requirements*.txt

      - name: Install requirements
        run: |
          pip install wheel
          pip install -r requirements.txt

  run-tests:
    name: Run tests
    runs-on: ${{ matrix.platform }}
    needs: cache-pybullet
    defaults:
      run:
        shell: bash -l {0}

    strategy:
      max-parallel: 1
      matrix:
        include:
          - python-version: "3.11"
            pytest-flags: ""
            codecov: true
            platform: "ubuntu-latest"
          - python-version: "3.10"
            pytest-flags: ""
            codecov: false
            platform: "ubuntu-latest"
          - python-version: "3.11"
            pytest-flags: "--only-integration"
            codecov: false
            platform: "ubuntu-latest"
          - python-version: "3.10"
            pytest-flags: "--only-integration"
            codecov: false
            platform: "ubuntu-latest"
          - python-version: "3.11"
            pytest-flags: "--only-stress-tests"
            codecov: false
            platform: "ubuntu-latest"

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        cache: "pip"
        python-version: ${{ matrix.python-version }}
        cache-dependency-path: |
          **/requirements*.txt

    - name: Install wheel
      run: pip install wheel

    - name: Install dependencies
      run: |
        pip install -r requirements.txt -r tests/requirements.txt

    - name: Run tests
      run: |
        PYTHONPATH=$PWD/src \
        pytest tests \
        --cov-report=xml \
        --cov-branch \
        --cov jdrones \
        --cov-report term-missing \
        ${{ matrix.pytest-flags }}

    - name: Upload code test coverage report
      uses: codecov/codecov-action@v3.1.1
      if: ${{ (github.actor != 'dependabot[bot]') && ( matrix.codecov ) && ( !env.ACT ) }}
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage.xml,./coverage.info
        fail_ci_if_error: true

  run-doc-tests:
    name: Build docs and test for issues
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        cache: "pip"
        python-version: "3.11"
        cache-dependency-path: |
            docs/requirements.txt

    - name: Install dependencies
      run: |
        sudo apt-get update && sudo apt-get -y install pandoc
        python -m pip install -r docs/requirements.txt

    - name: Build docs and analyze output
      run: |
        PYTHONPATH=$PWD/src \
        python -m \
        sphinx \
          -b html \
          -d docs/_build/html/doctrees \
          docs \
          docs/_build/html/ \
          >build.log

        IGNORE_PATTERN=$(cat docs/sphinx_warning_ignore.txt | \
                         sed -e 's/#.*$//g'| \
                         sed -re '/^\s*$/d' | \
                         awk '{print}' ORS='\\|' | \
                         sed -e 's/\\|$//g' \
                      )

        OUTPUT=$(grep -E "[\w\s]+\.py" build.log | grep -v "$IGNORE_PATTERN")

        if [ -z "$OUTPUT" ]; then
          echo $OUTPUT
          exit 1
        else
          echo "Everything is a-okay!"
          exit 0
        fi

  docstr-cov:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python 3.x
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install docstr-coverage
        run: pip install docstr-coverage==2.2.0

      - name: Get SHAs
        run: |
          git config advice.detachedHead false
          if [[ ${{ github.event_name }} == 'push' ]]; then
            echo "BASE=$(git rev-parse HEAD^)" >> $GITHUB_ENV
            echo "HEAD=$(git rev-parse HEAD)" >> $GITHUB_ENV
          elif [[ ${{ github.event_name }} == 'pull_request' ]]; then
            echo "BASE=${{ github.event.pull_request.base.sha }}" >> $GITHUB_ENV
            echo "HEAD=${{ github.event.pull_request.head.sha }}" >> $GITHUB_ENV

          else
            echo "Unexpected event trigger"
            exit 1
          fi

      - name: Get $BASE coverage
        run: |
          git checkout $BASE
          P=$(docstr-coverage -F0 -p)
          if [ -z "$P" ]
          then
            P=0
          fi
          echo "BASE_COV=$P" >> $GITHUB_ENV

      - name: Test $HEAD coverage
        run: |
          echo "$BASE coverage was: $BASE_COV%"
          git checkout $HEAD
          docstr-coverage --fail-under=$BASE_COV

      - name: Blame
        run: |
          git diff --name-only $(git merge-base $BASE $HEAD) | \
          xargs docstr-coverage -F0 --accept-empty
        if: failure()
